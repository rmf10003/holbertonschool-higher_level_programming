5/21
0x06. Python - Classes and Objects

who are these methods private from?
why doesn't a setter work for init values?

a class - creates a type and (objects) are instances of that class

fields - variables that belong to an object or class
       can be just one instance or for the entire class: instance variables and class variables respectively

methods - funtions that belong to a class (can be used by objects of that class

attributes - the collective fields and methods of a class aka property

self - added to the beginning of the parameter list, however no value is imput for self parameter when
 method is called (python provides the value).  self variable refers to the object itself.  

__init__ method - runs as soon as an object of a class is instantiated (created).  it is useful for passing 
initial values to your objects (initialization) 

every object refers to its class via the self.__class__ attribute

data encapsulation - the bundling of data with the methods that operate on these data

information hiding - principal that some internal information or data is "hidden", so that it can't be accidentally changed.

data abstraction = data encapsulation + data hiding

@property - decorator for a method which is used for getting a value

@<method_name>.setter - decorator for a function that has to function as the setter

------------------------------------------------------------


5/23
0x07 test driven development

use this at the end of a module to run tests on the docstrings
if __name__ == "__main__":
    import doctest
    doctest.testmod([verbose=True/False])

run python3 -v to get a detailed list of all the tests run

run useing this to avoid includeing the previous block in code
python3 -m doctest -v example.py

use this block at the end of code to test using a text file
if __name__ == "__main__":
   import doctest
   doctest.testfile("test.txt")

also analogously can run with this CLA instead of source block
python -m doctest -v example.txt

If expected output does contain a blank line, put <BLANKLINE> in your doctest example each place a blank line is expected.

All hard tab characters are expanded to spaces, using 8-column tab stops.

_______

5/29
0x09 objects everywhere

Since strings are immutable, Python optimizes resources by making two names that refer to the same string value refer to the same object.